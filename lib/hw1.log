
Ruby intro part 1
  #sum
    should be defined
    returns correct sum [20 points]
    works on the empty array [10 points]
  #max_2_sum
    should be defined
    returns the correct sum [7 points] (FAILED - 1)
    works even if 2 largest values are the same [3 points]
    returns zero if array is empty [10 points]
    returns value of the element if just one element [10 points]
  #sum_to_n
    should be defined
    returns true when any two elements sum to the second argument [30 points]
    returns false for any single element array [5 points]
    returns false for an empty array [5 points] (FAILED - 2)

#hello
Hello, Testing!
  should be defined
Hello, Dan!
  The hello method returns the correct string [30 points] (FAILED - 3)

#starts_with_consonant?
  should be defined
  classifies true cases [10 points]
  classifies false cases [10 points]
  works on the empty string [5 points]
  works on nonletters [5 points] (FAILED - 4)

#binary_multiple_of_4?
  should be defined
  classifies valid binary numbers [30 points]
  rejects invalid binary numbers [10 points]

BookInStock
  should be defined
  getters and setters
    should set ISBN [10 points]
    should set price [10 points]
    should be able to change ISBN [10 points] (FAILED - 5)
    should be able to change price [10 points] (FAILED - 6)
  constructor
    should reject invalid ISBN number [10 points]
    should reject zero price [10 points]
    should reject negative price [10 points]
  #price_as_string
    should be defined
    should display 33.95 as "$33.95" [10 points]
    should display 1.1 as $1.10 [10 points]
    should display 20 as $20.00 [10 points]

Failures:

  1) Ruby intro part 1 #max_2_sum returns the correct sum [7 points]
     Failure/Error: expect(max_2_sum([1,-2,-3,-4,-5])).to eq(-1)

       expected: -1
            got: 2

       (compared using ==)
     # ./spec/part1_spec.rb:29:in `block (3 levels) in <top (required)>'

  2) Ruby intro part 1 #sum_to_n returns false for an empty array [5 points]
     Failure/Error: expect(sum_to_n?([], 0)).to be false

       expected false
            got true
     # ./spec/part1_spec.rb:69:in `block (3 levels) in <top (required)>'

  3) #hello The hello method returns the correct string [30 points]
     Failure/Error: expect(hello("Dan").class).to eq(String)

       expected: String
            got: NilClass

       (compared using ==)

       Diff:
       @@ -1,2 +1,2 @@
       -String
       +NilClass
     # ./spec/part2_spec.rb:9:in `block (2 levels) in <top (required)>'

  4) #starts_with_consonant? works on nonletters [5 points]
     Failure/Error: expect(starts_with_consonant?('#foo')).to be_falsy

       expected: falsey value
            got: true
     # ./spec/part2_spec.rb:36:in `block (2 levels) in <top (required)>'

  5) BookInStock getters and setters should be able to change ISBN [10 points]
     Failure/Error: @book.isbn = 'isbn2'

     NoMethodError:
       undefined method `isbn=' for #<BookInStock:0x0000000212cb48 @isbn="isbn1", @price=33.8>
       Did you mean?  isbn
     # ./spec/part3_spec.rb:17:in `block (3 levels) in <top (required)>'

  6) BookInStock getters and setters should be able to change price [10 points]
     Failure/Error: @book.price = 300.0

     NoMethodError:
       undefined method `price=' for #<BookInStock:0x0000000211b460 @isbn="isbn1", @price=33.8>
       Did you mean?  price
     # ./spec/part3_spec.rb:21:in `block (3 levels) in <top (required)>'

Finished in 0.02023 seconds (files took 0.08118 seconds to load)
34 examples, 6 failures

Failed examples:

rspec ./spec/part1_spec.rb:27 # Ruby intro part 1 #max_2_sum returns the correct sum [7 points]
rspec ./spec/part1_spec.rb:68 # Ruby intro part 1 #sum_to_n returns false for an empty array [5 points]
rspec ./spec/part2_spec.rb:8 # #hello The hello method returns the correct string [30 points]
rspec ./spec/part2_spec.rb:35 # #starts_with_consonant? works on nonletters [5 points]
rspec ./spec/part3_spec.rb:16 # BookInStock getters and setters should be able to change ISBN [10 points]
rspec ./spec/part3_spec.rb:20 # BookInStock getters and setters should be able to change price [10 points]

